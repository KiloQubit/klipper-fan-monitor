[gcode_macro _HEATER_FAN_MONITOR_VARS]
variable_min_rpm: 7000  # Shut down if rpm falls below this value for multiple consecutive readings.
variable_fan_section: 'heater_fan hotend_fan'
variable_extruder_section: 'extruder'
variable_last1_rpm: 0
variable_last2_rpm: 0
variable_last_target: 0
gcode:
    ; gcode section is required

[delayed_gcode HEATER_FAN_MONITOR]
gcode:
    {% set vars = printer['gcode_macro _HEATER_FAN_MONITOR_VARS'] %}
    {% set min_rpm = vars.min_rpm %}
    {% set last1_rpm = vars.last1_rpm %}
    {% set last2_rpm = vars.last2_rpm %}
    {% set last_target = vars.last_target %}
    {% set fan = printer[vars.fan_section] %}
    {% set extruder = printer[vars.extruder_section] %}
    {% set current_rpm = fan.rpm %}

    # Check if extruder is on and all rpms are below limit.
    # If the extruder just turned on, there's a race condition where target > 0,
    # but the last 3 rpms are all still below limit, so ensure extruder has been
    # on for at least this and previous cycle.
    {% if extruder.target > 0  and last_target > 0 and current_rpm < min_rpm and last1_rpm < min_rpm and last2_rpm < min_rpm %}
        # Retract filament out of the hot zone to avoid a clog, since the fan has failed.
        M83
        G1 E-25 F3600
        # Raise Z to get the hot nozzle away from the print.
        G91
        G1 Z+5
        # E-Stop.
        { action_emergency_stop('HEATER FAN TOO SLOW: heater target: %.2f C, min RPM: %.2f, last fan RPMs: [%.2f, %.2f, %.2f]' % (extruder.target, min_rpm, last2_rpm, last1_rpm, current_rpm)) }
    {% endif %}

    ; Keep the last speed and the last two rpm readings.
    SET_GCODE_VARIABLE MACRO=_HEATER_FAN_MONITOR_VARS VARIABLE=last_target VALUE={extruder.target}
    SET_GCODE_VARIABLE MACRO=_HEATER_FAN_MONITOR_VARS VARIABLE=last2_rpm VALUE={last1_rpm}
    SET_GCODE_VARIABLE MACRO=_HEATER_FAN_MONITOR_VARS VARIABLE=last1_rpm VALUE={current_rpm}
    # Below action_respond_info is for debugging only.
    # { action_respond_info('extruder target: %.2f, rpms: [%.2f, %.2f, %.2f]' % (extruder.target, last2_rpm, last1_rpm, current_rpm)) }

    UPDATE_DELAYED_GCODE ID=HEATER_FAN_MONITOR DURATION=3

# Start the heater fan monitor if we have the data.
[delayed_gcode HEATER_FAN_MONITOR_START]
initial_duration: 5
gcode:
    {% set vars = printer['gcode_macro _HEATER_FAN_MONITOR_VARS'] %}
    {% if vars.fan_section not in printer %}
        { action_respond_info('Heater fan monitor DISABLED: no [%s] section in configuration' % vars.fan_section) }
    {% elif 'rpm' not in printer[vars.fan_section] or printer[vars.fan_section].rpm is none %}
        { action_respond_info('Heater fan monitor DISABLED: no rpm available for [%s], is your tachometer pin configured?' % vars.fan_section) }
    {% elif vars.extruder_section not in printer %}
        { action_respond_info('Heater fan monitor DISABLED: no [%s] available in configuration' % vars.extruder_section) }
    {% else %}
        { action_respond_info('Heater fan monitor started') }
        UPDATE_DELAYED_GCODE ID=HEATER_FAN_MONITOR DURATION=1
    {% endif %}
